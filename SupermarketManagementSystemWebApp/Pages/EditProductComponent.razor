@page "/editproduct/{productID}";

@inject NavigationManager NaviagationManager
@inject IEditProductUseCase EditProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IGetProductByIDUseCase GetProductByIDUseCase

<h3>Edit Product</h3>

@if (product != null)
{
        <EditForm Model="product" OnValidSubmit="validSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary ></ValidationSummary>

                <div class="form-group">
                     <label for="name">Name</label>
                     <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
                </div>
                <div class="form-group">
                     <label for="category">Category</label>
                     <select id="category" @bind = "product.CategoryID" class="form-control">
                         <option selected></option>
                @foreach (var cat in categories)
                {
                            <option value="@cat.CategoryID">@cat.Name</option>
                }
                     </select>
                </div>
                <div class="form-group">
                    <label for="price">Price</label>
                    <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
                </div>
               <div class="form-group">
                     <label for="quantity">Quantity</label>
                     <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
                </div>


                <br/>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" @onclick="OnCancel" class="btn btn-danger">Cancel</button> 

        </EditForm>
}

@code {
    [Parameter]
    public string ProductID { get; set; }

    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.ProductID, out int editproductID))
        {
            var pro = GetProductByIDUseCase.Execute(editproductID);
            this.product = new Product 
            { 
                ProductID = pro.ProductID, 
                CategoryID = pro.CategoryID, 
                Name = pro.Name, 
                Price = pro.Price, 
                Quantity=pro.Quantity 
            };
        }

    }

    private void validSubmit()
    {
        EditProductUseCase.Execute(this.product);
        NaviagationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NaviagationManager.NavigateTo("/products");
    }
}
