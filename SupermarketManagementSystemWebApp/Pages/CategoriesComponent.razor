
@page "/categories";
@inject NavigationManager NavigationManager
@inject UseCases.UseCaseInterfaces.IViewCategoriesUseCase ViewCategoryUseCase;
@inject UseCases.UseCaseInterfaces.IDeleteCategoryUseCase DeleteCategoryUseCase;
 
<h3>Manage Categories</h3>


@if (categories != null)
{
    <table class="table">
        <thead>
            <tr>
             <th>Name</th>
             <th>Description</th>
             <th></th>
            </tr>
        </thead>
    <tbody>
    @foreach (var category in categories)
     {
        <tr>
            <td>@category.Name</td>
            <td>@category.Description</td>
            <td>
            <button type="button" @onclick="()=>EditCategory(category)" class="btn btn-outline-primary" >Edit</button>
            <button type="button" @onclick="()=>DeleteCategory(category.CategoryID)" class="btn btn-outline-primary" >Delete</button>
            </td>
        </tr>
     }
    </tbody>
    </table>
}
<br/>
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary" >Add Category</button>

@code {
    private List<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories();
    }

    private void OnClickAddCategory()
    {
        NavigationManager.NavigateTo("/addcategory");
    }

    private void EditCategory(Category category)
    {
        NavigationManager.NavigateTo($"/editcategory/{category.CategoryID}");
    }

    private void DeleteCategory(int categoryID)
    {
        DeleteCategoryUseCase.Delete(categoryID);
        LoadCategories();
    }
    private void LoadCategories()
    {
        categories = ViewCategoryUseCase.Execute()?.ToList();
    }
}
