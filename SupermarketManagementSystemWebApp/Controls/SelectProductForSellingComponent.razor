@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryID ViewProductsByCategoryID



<h3>Select Product to Sell</h3>


<div class="form-group">
    <label for="category">Category</label>
    <select id="category" @bind = "SelectedCategoryID" class="form-control">
    <option selected></option>
        @foreach (var cat in categories)
        {
                <option value="@cat.CategoryID">@cat.Name</option>
        }

    </select>
    </div>
@if (productsInCategory !=null)
{
    <table class="table">
        <thead>
                <tr>
                <th>Product Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in productsInCategory) 
            {
                 <tr @onclick="@(()=>OnSelectProduct(prod))" style="@(prod.ProductID==selectedProductID?"background-color:beige; cursor:pointer;":"cursor:pointer")">
                    <td> @prod.Name</td>
                    <td> @prod.Quantity</td> 
                </tr>
            }

        </tbody>
    </table>
}
@code {
    private IEnumerable<Product> productsInCategory;
    private int selectedProductID;

    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    private int selectedCategoryID;

    private int SelectedCategoryID
    {
        get
        {
            return selectedCategoryID;
        }
        set
        {
            selectedCategoryID = value;
            productsInCategory = ViewProductsByCategoryID.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

    private void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);
        if(product!=null) selectedProductID = product.ProductID;
    }
}
